[{"/Users/justinfarrell/Documents/start-page/src/App.tsx":"1","/Users/justinfarrell/Documents/start-page/src/index.tsx":"2","/Users/justinfarrell/Documents/start-page/src/reportWebVitals.ts":"3","/Users/justinfarrell/Documents/start-page/src/helpers.tsx":"4","/Users/justinfarrell/Documents/start-page/src/components/NavBar.tsx":"5","/Users/justinfarrell/Documents/start-page/src/components/AddLinkModal.tsx":"6","/Users/justinfarrell/Documents/start-page/src/components/LinkGrid.tsx":"7","/Users/justinfarrell/Documents/start-page/src/components/LinkGridItem.tsx":"8","/Users/justinfarrell/Documents/start-page/src/components/Canvas.tsx":"9","/Users/justinfarrell/Documents/start-page/src/objects/SimObject.tsx":"10","/Users/justinfarrell/Documents/start-page/src/objects/Vector.tsx":"11","/Users/justinfarrell/Documents/start-page/src/ObjectManager.tsx":"12","/Users/justinfarrell/Documents/start-page/src/objects/components/BackgroundRenderer.tsx":"13","/Users/justinfarrell/Documents/start-page/src/objects/components/GenericRenderer.tsx":"14","/Users/justinfarrell/Documents/start-page/src/objects/components/CloudRenderer.tsx":"15","/Users/justinfarrell/Documents/start-page/src/objects/Cloud.tsx":"16","/Users/justinfarrell/Documents/start-page/src/objects/components/Rigidbody.tsx":"17","/Users/justinfarrell/Documents/start-page/src/objects/components/ParticleSystem.tsx":"18","/Users/justinfarrell/Documents/start-page/src/objects/components/CircleRenderer.tsx":"19","/Users/justinfarrell/Documents/start-page/src/objects/BackgroundGrass.tsx":"20","/Users/justinfarrell/Documents/start-page/src/EnvironmentManager.tsx":"21"},{"size":7381,"mtime":1607916903710,"results":"22","hashOfConfig":"23"},{"size":500,"mtime":1607203866520,"results":"24","hashOfConfig":"23"},{"size":425,"mtime":1607203866521,"results":"25","hashOfConfig":"23"},{"size":2501,"mtime":1607837537238,"results":"26","hashOfConfig":"23"},{"size":498,"mtime":1607659015730,"results":"27","hashOfConfig":"23"},{"size":2943,"mtime":1607660500248,"results":"28","hashOfConfig":"23"},{"size":282,"mtime":1607569556018,"results":"29","hashOfConfig":"23"},{"size":1456,"mtime":1607656514835,"results":"30","hashOfConfig":"23"},{"size":1906,"mtime":1607916914294,"results":"31","hashOfConfig":"23"},{"size":1935,"mtime":1607897881578,"results":"32","hashOfConfig":"23"},{"size":1452,"mtime":1607827525816,"results":"33","hashOfConfig":"23"},{"size":3856,"mtime":1607897951575,"results":"34","hashOfConfig":"23"},{"size":785,"mtime":1607898570924,"results":"35","hashOfConfig":"23"},{"size":2692,"mtime":1607897549068,"results":"36","hashOfConfig":"23"},{"size":1143,"mtime":1607898621002,"results":"37","hashOfConfig":"23"},{"size":746,"mtime":1607897985974,"results":"38","hashOfConfig":"23"},{"size":491,"mtime":1607839092752,"results":"39","hashOfConfig":"23"},{"size":1805,"mtime":1607898000593,"results":"40","hashOfConfig":"23"},{"size":873,"mtime":1607892060682,"results":"41","hashOfConfig":"23"},{"size":781,"mtime":1607898051964,"results":"42","hashOfConfig":"23"},{"size":1782,"mtime":1607916641683,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p35ynl",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/justinfarrell/Documents/start-page/src/App.tsx",[],"/Users/justinfarrell/Documents/start-page/src/index.tsx",[],["89","90"],"/Users/justinfarrell/Documents/start-page/src/reportWebVitals.ts",[],"/Users/justinfarrell/Documents/start-page/src/helpers.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/NavBar.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/AddLinkModal.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/LinkGrid.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/LinkGridItem.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/Canvas.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/SimObject.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Vector.tsx",[],"/Users/justinfarrell/Documents/start-page/src/ObjectManager.tsx",["91"],"// Will manage all SimObjects and their components and keep things in sync\n\nimport { Renderer } from \"./objects/components/Renderer\";\nimport { SimObject } from \"./objects/SimObject\";\nimport { CanvasId, cullingDeadzone, deadzone } from \"./helpers\";\nimport { Vec2 } from \"./objects/Vector\";\nimport { GenericRenderer } from \"./objects/components/GenericRenderer\";\nimport { EnvironmentManager, EnvironmentModes } from \"./EnvironmentManager\";\n\n// Also it runs all render functions and sets the background correctly so that\n// there isn't flicker\n\nexport class ObjectManager {\n  canvasInstance: HTMLCanvasElement | null;\n  ObjectList: SimObject[] = [];\n  RendererList: Renderer[] = [];\n  timeElapsedSinceLastUpdate: number = 0;\n  environmentManager: EnvironmentManager;\n  constructor(environmentManager: EnvironmentManager) {\n    this.canvasInstance = document.getElementById(\n      CanvasId\n    ) as HTMLCanvasElement;\n\n    this.environmentManager = environmentManager;\n\n    requestAnimationFrame(this.renderAll);\n    requestAnimationFrame(this.updateAll);\n  }\n\n  // Creates a blank object\n  createObject = (initialPosition?: Vec2): SimObject => {\n    let obj = new SimObject(this, this.environmentManager, initialPosition);\n\n    this.ObjectList.push(obj);\n\n    return obj;\n  };\n\n  // Adds an object instantiated with new() elsewhere\n  addObject = (obj: SimObject): SimObject => {\n    this.ObjectList.push(obj);\n\n    return obj;\n  };\n\n  removeObject = (obj: SimObject) => {\n    let index = 0;\n    let arrNum = this.ObjectList.length;\n    this.ObjectList.forEach((object) => {\n      if (obj === object) {\n        this.ObjectList.splice(index, 1);\n      }\n      index++;\n    });\n\n    if (this.ObjectList.length === arrNum) {\n      console.error(\"Failed to remove object from ObjectList: \", obj);\n    }\n  };\n\n  updateAll = () => {\n    if (!this.canvasInstance) return;\n    this.ObjectList.forEach((obj) => {\n      if (\n        obj.position.x < -deadzone ||\n        obj.position.x > this.canvasInstance!.width + deadzone ||\n        obj.position.y < -deadzone ||\n        obj.position.y > this.canvasInstance!.height + deadzone\n      ) {\n        this.removeObject(obj);\n      }\n\n      // If object survives culling, update its components\n      obj.components.forEach((component) => {\n        component.update();\n      });\n    });\n\n    const t1 = performance.now();\n    requestAnimationFrame(this.updateAll);\n    this.timeElapsedSinceLastUpdate = performance.now() - t1;\n  };\n\n  renderAll = () => {\n    if (!this.canvasInstance) {\n      let inst = document.getElementById(CanvasId) as HTMLCanvasElement;\n      if (inst == null) {\n        requestAnimationFrame(this.renderAll);\n        return;\n      }\n      this.canvasInstance = inst;\n    }\n\n    this.canvasInstance\n      .getContext(\"2d\")\n      ?.clearRect(0, 0, this.canvasInstance.width, this.canvasInstance.height);\n\n    // Rendering clouds last so they're drawn over the grass, so we need an index\n    // so that we can render them in order by manipulating the rendererlist\n\n    this.RendererList.sort((a, b) => {\n      return (a as GenericRenderer).zIndex - (b as GenericRenderer).zIndex;\n    });\n\n    this.RendererList.forEach((renderer) => {\n      if (\n        renderer.root.position.x > -cullingDeadzone &&\n        renderer.root.position.x <\n          this.canvasInstance!.width + cullingDeadzone &&\n        renderer.root.position.y > -cullingDeadzone &&\n        renderer.root.position.y < this.canvasInstance!.height + cullingDeadzone\n      ) {\n        renderer.render();\n      }\n    });\n\n    this.drawCanvasToBackground();\n    requestAnimationFrame(this.renderAll);\n  };\n\n  drawCanvasToBackground = () => {\n    document.body.style.background = `url(${this.canvasInstance!.toDataURL()})`;\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.backgroundAttachment = \"fixed\";\n  };\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/components/BackgroundRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/GenericRenderer.tsx",["92"],"// A generic renderer which does things like grab the canvas, etc\n\nimport { Renderer } from \"./Renderer\";\nimport { CanvasId } from \"../../helpers\";\nimport { Vec2 } from \"../Vector\";\nimport { SimObject } from \"../SimObject\";\nimport { EnvironmentManager } from \"../../EnvironmentManager\";\n\nexport enum RenderModes {\n  sourceOver = \"source-over\",\n  sourceIn = \"source-in\",\n  sourceOut = \"source-out\",\n  sourceAtop = \"source-atop\",\n  destinationOver = \"destination-over\",\n  destinationIn = \"destination-in\",\n  destinationOut = \"destination-out\",\n  destinationAtop = \"destination-atop\",\n  lighter = \"lighter\",\n  copy = \"copy\",\n  xor = \"xor\",\n  multiply = \"multiply\",\n  screen = \"screen\",\n  overlay = \"overlay\",\n  darken = \"darken\",\n  lighten = \"lighten\",\n  colorDodge = \"color-dodge\",\n  colorBurn = \"color-burn\",\n  hardLight = \"hard-light\",\n  softLight = \"soft-light\",\n  difference = \"difference\",\n  exclusion = \"exclusion\",\n  hue = \"hue\",\n  saturation = \"saturation\",\n  color = \"color\",\n  luminosity = \"luminosity\",\n}\n\nexport class GenericRenderer implements Renderer {\n  canvasInstance: any = null;\n  ctx: CanvasRenderingContext2D | null = null;\n  root: SimObject;\n  zIndex: number = 0;\n  constructor(root: SimObject) {\n    this.start();\n    this.root = root;\n  }\n\n  start() {\n    this.canvasInstance = document.getElementById(CanvasId);\n  }\n\n  update() {}\n\n  drawCircle(\n    position: Vec2,\n    radius: number,\n    stroke?: boolean,\n    strokeWidth?: number\n  ) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    const oldStrokeWidth = this.ctx.lineWidth;\n\n    this.ctx.beginPath();\n    this.ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI, false);\n    this.ctx.fill();\n    if (strokeWidth) this.ctx.lineWidth = strokeWidth;\n    if (stroke) this.ctx.stroke();\n    this.ctx.closePath();\n    this.ctx.lineWidth = oldStrokeWidth;\n  }\n\n  changeColor(newColor: any) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    this.ctx.fillStyle = newColor; // Changes the color to whatever\n  }\n\n  changeGlobalCompositeOperation(newOperation: RenderModes) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    this.ctx.globalCompositeOperation = newOperation;\n  }\n\n  render() {\n    if (this.canvasInstance == null) {\n      let el = document.getElementById(CanvasId);\n      if (el == null) {\n        return;\n      }\n      this.canvasInstance = el;\n    }\n\n    if (this.ctx == null) {\n      let ctx = this.canvasInstance.getContext(\"2d\");\n      if (ctx == null) {\n        return;\n      }\n      this.ctx = ctx;\n    }\n  }\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/components/CloudRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Cloud.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/Rigidbody.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/ParticleSystem.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/CircleRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/BackgroundGrass.tsx",[],"/Users/justinfarrell/Documents/start-page/src/EnvironmentManager.tsx",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":8,"column":30,"nodeType":"99","messageId":"100","endLine":8,"endColumn":46},{"ruleId":"97","severity":1,"message":"101","line":7,"column":10,"nodeType":"99","messageId":"100","endLine":7,"endColumn":28},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'EnvironmentModes' is defined but never used.","Identifier","unusedVar","'EnvironmentManager' is defined but never used.","no-global-assign","no-unsafe-negation"]