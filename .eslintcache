[{"/Users/justinfarrell/Documents/start-page/src/App.tsx":"1","/Users/justinfarrell/Documents/start-page/src/index.tsx":"2","/Users/justinfarrell/Documents/start-page/src/reportWebVitals.ts":"3","/Users/justinfarrell/Documents/start-page/src/helpers.tsx":"4","/Users/justinfarrell/Documents/start-page/src/components/NavBar.tsx":"5","/Users/justinfarrell/Documents/start-page/src/components/AddLinkModal.tsx":"6","/Users/justinfarrell/Documents/start-page/src/components/LinkGrid.tsx":"7","/Users/justinfarrell/Documents/start-page/src/components/LinkGridItem.tsx":"8","/Users/justinfarrell/Documents/start-page/src/components/Canvas.tsx":"9","/Users/justinfarrell/Documents/start-page/src/objects/SimObject.tsx":"10","/Users/justinfarrell/Documents/start-page/src/objects/Vector.tsx":"11","/Users/justinfarrell/Documents/start-page/src/ObjectManager.tsx":"12","/Users/justinfarrell/Documents/start-page/src/objects/components/BackgroundRenderer.tsx":"13","/Users/justinfarrell/Documents/start-page/src/objects/components/GenericRenderer.tsx":"14","/Users/justinfarrell/Documents/start-page/src/objects/components/CloudRenderer.tsx":"15","/Users/justinfarrell/Documents/start-page/src/objects/Cloud.tsx":"16","/Users/justinfarrell/Documents/start-page/src/objects/components/Rigidbody.tsx":"17","/Users/justinfarrell/Documents/start-page/src/objects/components/ParticleSystem.tsx":"18","/Users/justinfarrell/Documents/start-page/src/objects/components/CircleRenderer.tsx":"19","/Users/justinfarrell/Documents/start-page/src/objects/BackgroundGrass.tsx":"20","/Users/justinfarrell/Documents/start-page/src/EnvironmentManager.tsx":"21","/Users/justinfarrell/Documents/start-page/src/objects/Tree.tsx":"22","/Users/justinfarrell/Documents/start-page/src/objects/components/TreeRenderer.tsx":"23","/Users/justinfarrell/Documents/start-page/src/objects/Moon.tsx":"24","/Users/justinfarrell/Documents/start-page/src/objects/Mask.tsx":"25"},{"size":10394,"mtime":1608605371048,"results":"26","hashOfConfig":"27"},{"size":500,"mtime":1607203866520,"results":"28","hashOfConfig":"27"},{"size":425,"mtime":1607203866521,"results":"29","hashOfConfig":"27"},{"size":2501,"mtime":1607837537238,"results":"30","hashOfConfig":"27"},{"size":505,"mtime":1607917415399,"results":"31","hashOfConfig":"27"},{"size":2943,"mtime":1607918575387,"results":"32","hashOfConfig":"27"},{"size":282,"mtime":1607569556018,"results":"33","hashOfConfig":"27"},{"size":1456,"mtime":1607656514835,"results":"34","hashOfConfig":"27"},{"size":1906,"mtime":1607916914294,"results":"35","hashOfConfig":"27"},{"size":1935,"mtime":1607897881578,"results":"36","hashOfConfig":"27"},{"size":1452,"mtime":1607827525816,"results":"37","hashOfConfig":"27"},{"size":3856,"mtime":1607897951575,"results":"38","hashOfConfig":"27"},{"size":785,"mtime":1607898570924,"results":"39","hashOfConfig":"27"},{"size":3488,"mtime":1608600445337,"results":"40","hashOfConfig":"27"},{"size":1143,"mtime":1607898621002,"results":"41","hashOfConfig":"27"},{"size":777,"mtime":1607918049192,"results":"42","hashOfConfig":"27"},{"size":491,"mtime":1607839092752,"results":"43","hashOfConfig":"27"},{"size":1805,"mtime":1607898000593,"results":"44","hashOfConfig":"27"},{"size":1261,"mtime":1608604828242,"results":"45","hashOfConfig":"27"},{"size":781,"mtime":1607898051964,"results":"46","hashOfConfig":"27"},{"size":2379,"mtime":1608605252023,"results":"47","hashOfConfig":"27"},{"size":758,"mtime":1608601067913,"results":"48","hashOfConfig":"27"},{"size":1646,"mtime":1608602188762,"results":"49","hashOfConfig":"27"},{"size":739,"mtime":1608604121633,"results":"50","hashOfConfig":"27"},{"size":785,"mtime":1608605410617,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p35ynl",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/justinfarrell/Documents/start-page/src/App.tsx",[],"/Users/justinfarrell/Documents/start-page/src/index.tsx",[],["107","108"],"/Users/justinfarrell/Documents/start-page/src/reportWebVitals.ts",[],"/Users/justinfarrell/Documents/start-page/src/helpers.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/NavBar.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/AddLinkModal.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/LinkGrid.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/LinkGridItem.tsx",[],"/Users/justinfarrell/Documents/start-page/src/components/Canvas.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/SimObject.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Vector.tsx",[],"/Users/justinfarrell/Documents/start-page/src/ObjectManager.tsx",["109"],"// Will manage all SimObjects and their components and keep things in sync\n\nimport { Renderer } from \"./objects/components/Renderer\";\nimport { SimObject } from \"./objects/SimObject\";\nimport { CanvasId, cullingDeadzone, deadzone } from \"./helpers\";\nimport { Vec2 } from \"./objects/Vector\";\nimport { GenericRenderer } from \"./objects/components/GenericRenderer\";\nimport { EnvironmentManager, EnvironmentModes } from \"./EnvironmentManager\";\n\n// Also it runs all render functions and sets the background correctly so that\n// there isn't flicker\n\nexport class ObjectManager {\n  canvasInstance: HTMLCanvasElement | null;\n  ObjectList: SimObject[] = [];\n  RendererList: Renderer[] = [];\n  timeElapsedSinceLastUpdate: number = 0;\n  environmentManager: EnvironmentManager;\n  constructor(environmentManager: EnvironmentManager) {\n    this.canvasInstance = document.getElementById(\n      CanvasId\n    ) as HTMLCanvasElement;\n\n    this.environmentManager = environmentManager;\n\n    requestAnimationFrame(this.renderAll);\n    requestAnimationFrame(this.updateAll);\n  }\n\n  // Creates a blank object\n  createObject = (initialPosition?: Vec2): SimObject => {\n    let obj = new SimObject(this, this.environmentManager, initialPosition);\n\n    this.ObjectList.push(obj);\n\n    return obj;\n  };\n\n  // Adds an object instantiated with new() elsewhere\n  addObject = (obj: SimObject): SimObject => {\n    this.ObjectList.push(obj);\n\n    return obj;\n  };\n\n  removeObject = (obj: SimObject) => {\n    let index = 0;\n    let arrNum = this.ObjectList.length;\n    this.ObjectList.forEach((object) => {\n      if (obj === object) {\n        this.ObjectList.splice(index, 1);\n      }\n      index++;\n    });\n\n    if (this.ObjectList.length === arrNum) {\n      console.error(\"Failed to remove object from ObjectList: \", obj);\n    }\n  };\n\n  updateAll = () => {\n    if (!this.canvasInstance) return;\n    this.ObjectList.forEach((obj) => {\n      if (\n        obj.position.x < -deadzone ||\n        obj.position.x > this.canvasInstance!.width + deadzone ||\n        obj.position.y < -deadzone ||\n        obj.position.y > this.canvasInstance!.height + deadzone\n      ) {\n        this.removeObject(obj);\n      }\n\n      // If object survives culling, update its components\n      obj.components.forEach((component) => {\n        component.update();\n      });\n    });\n\n    const t1 = performance.now();\n    requestAnimationFrame(this.updateAll);\n    this.timeElapsedSinceLastUpdate = performance.now() - t1;\n  };\n\n  renderAll = () => {\n    if (!this.canvasInstance) {\n      let inst = document.getElementById(CanvasId) as HTMLCanvasElement;\n      if (inst == null) {\n        requestAnimationFrame(this.renderAll);\n        return;\n      }\n      this.canvasInstance = inst;\n    }\n\n    this.canvasInstance\n      .getContext(\"2d\")\n      ?.clearRect(0, 0, this.canvasInstance.width, this.canvasInstance.height);\n\n    // Rendering clouds last so they're drawn over the grass, so we need an index\n    // so that we can render them in order by manipulating the rendererlist\n\n    this.RendererList.sort((a, b) => {\n      return (a as GenericRenderer).zIndex - (b as GenericRenderer).zIndex;\n    });\n\n    this.RendererList.forEach((renderer) => {\n      if (\n        renderer.root.position.x > -cullingDeadzone &&\n        renderer.root.position.x <\n          this.canvasInstance!.width + cullingDeadzone &&\n        renderer.root.position.y > -cullingDeadzone &&\n        renderer.root.position.y < this.canvasInstance!.height + cullingDeadzone\n      ) {\n        renderer.render();\n      }\n    });\n\n    this.drawCanvasToBackground();\n    requestAnimationFrame(this.renderAll);\n  };\n\n  drawCanvasToBackground = () => {\n    document.body.style.background = `url(${this.canvasInstance!.toDataURL()})`;\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.backgroundAttachment = \"fixed\";\n  };\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/components/BackgroundRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/GenericRenderer.tsx",["110"],"// A generic renderer which does things like grab the canvas, etc\n\nimport { Renderer } from \"./Renderer\";\nimport { CanvasId } from \"../../helpers\";\nimport { Vec2 } from \"../Vector\";\nimport { SimObject } from \"../SimObject\";\nimport { EnvironmentManager } from \"../../EnvironmentManager\";\n\nexport enum RenderModes {\n  sourceOver = \"source-over\",\n  sourceIn = \"source-in\",\n  sourceOut = \"source-out\",\n  sourceAtop = \"source-atop\",\n  destinationOver = \"destination-over\",\n  destinationIn = \"destination-in\",\n  destinationOut = \"destination-out\",\n  destinationAtop = \"destination-atop\",\n  lighter = \"lighter\",\n  copy = \"copy\",\n  xor = \"xor\",\n  multiply = \"multiply\",\n  screen = \"screen\",\n  overlay = \"overlay\",\n  darken = \"darken\",\n  lighten = \"lighten\",\n  colorDodge = \"color-dodge\",\n  colorBurn = \"color-burn\",\n  hardLight = \"hard-light\",\n  softLight = \"soft-light\",\n  difference = \"difference\",\n  exclusion = \"exclusion\",\n  hue = \"hue\",\n  saturation = \"saturation\",\n  color = \"color\",\n  luminosity = \"luminosity\",\n}\n\nexport class GenericRenderer implements Renderer {\n  canvasInstance: any = null;\n  ctx: CanvasRenderingContext2D | null = null;\n  root: SimObject;\n  zIndex: number = 0;\n  constructor(root: SimObject) {\n    this.start();\n    this.root = root;\n  }\n\n  start() {\n    this.canvasInstance = document.getElementById(CanvasId);\n  }\n\n  update() {}\n\n  drawCircle(\n    position: Vec2,\n    radius: number,\n    stroke?: boolean,\n    strokeWidth?: number\n  ) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    const oldStrokeWidth = this.ctx.lineWidth;\n\n    this.ctx.beginPath();\n    this.ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI, false);\n    this.ctx.fill();\n    if (strokeWidth) this.ctx.lineWidth = strokeWidth;\n    if (stroke) this.ctx.stroke();\n    this.ctx.closePath();\n    this.ctx.lineWidth = oldStrokeWidth;\n  }\n\n  drawRect(position: Vec2, scale: Vec2) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    this.ctx.beginPath();\n    this.ctx.rect(position.x, position.y, scale.x, scale.y);\n    this.ctx.fill();\n    this.ctx.closePath();\n  }\n\n  drawTriangle(position: Vec2, scale: Vec2) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(position.x, position.y); // We'll just keep the origin as the top point\n    this.ctx.lineTo(position.x - scale.x / 2, position.y + scale.y);\n    this.ctx.lineTo(position.x + scale.x / 2, position.y + scale.y);\n    this.ctx.lineTo(position.x, position.y);\n    this.ctx.fill();\n\n    this.ctx.closePath();\n  }\n\n  changeColor(newColor: any) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    this.ctx.fillStyle = newColor; // Changes the color to whatever\n  }\n\n  changeGlobalCompositeOperation(newOperation: RenderModes) {\n    if (!this.ctx) {\n      console.error(\"No canvas context available to work with.\");\n      return;\n    }\n    this.ctx.globalCompositeOperation = newOperation;\n  }\n\n  render() {\n    if (this.canvasInstance == null) {\n      let el = document.getElementById(CanvasId);\n      if (el == null) {\n        return;\n      }\n      this.canvasInstance = el;\n    }\n\n    if (this.ctx == null) {\n      let ctx = this.canvasInstance.getContext(\"2d\");\n      if (ctx == null) {\n        return;\n      }\n      this.ctx = ctx;\n    }\n  }\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/components/CloudRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Cloud.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/Rigidbody.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/ParticleSystem.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/components/CircleRenderer.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/BackgroundGrass.tsx",[],"/Users/justinfarrell/Documents/start-page/src/EnvironmentManager.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Tree.tsx",["111"],"// Trees for the background\n\nimport { EnvironmentManager } from \"../EnvironmentManager\";\nimport { GenericRenderer } from \"./components/GenericRenderer\";\nimport { ObjectManager } from \"../ObjectManager\";\nimport { SimObject } from \"./SimObject\";\nimport { Vec2 } from \"./Vector\";\nimport { TreeRenderer } from \"./components/TreeRenderer\";\n\nexport class Tree extends SimObject {\n  renderer: TreeRenderer;\n  constructor(\n    objectManager: ObjectManager,\n    environmentManager: EnvironmentManager,\n    initialPosition?: Vec2,\n    initialScale?: Vec2\n  ) {\n    super(objectManager, environmentManager, initialPosition, initialScale);\n    this.renderer = new TreeRenderer(this, environmentManager, 2);\n    this.objectManager.RendererList.push(this.renderer);\n  }\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/components/TreeRenderer.tsx",["112"],"// Renderer for trees\nimport { EnvironmentManager } from \"../../EnvironmentManager\";\nimport { SimObject } from \"../SimObject\";\nimport { AddVectors, SubtractVectors, Vec2 } from \"../Vector\";\nimport { GenericRenderer, RenderModes } from \"./GenericRenderer\";\nexport class TreeRenderer extends GenericRenderer {\n  environmentManager: EnvironmentManager;\n\n  constructor(\n    root: SimObject,\n    environmentManager: EnvironmentManager,\n    zIndex: number\n  ) {\n    super(root);\n    this.environmentManager = environmentManager;\n    this.zIndex = zIndex;\n  }\n\n  render() {\n    super.render();\n\n    /*\n    this.changeColor(\n      `rgb(${this.environmentManager.g + 30}, ${\n        this.environmentManager.g + 30\n      }, ${this.environmentManager.b + 30})`\n    );\n    */\n    this.changeColor(\"brown\");\n\n    this.drawRect(\n      this.root.scale.x > 1\n        ? SubtractVectors(\n            this.root.position,\n            new Vec2(this.root.scale.x * 5, this.root.scale.y * 5)\n          )\n        : AddVectors(\n            this.root.position,\n            new Vec2(this.root.scale.x * 5, this.root.scale.y * 5)\n          ),\n      new Vec2(50 * this.root.scale.x, 100 * this.root.scale.y)\n    );\n\n    this.changeColor(\"green\");\n\n    this.drawTriangle(\n      new Vec2(\n        this.root.position.x + 25,\n        this.root.position.y - 200 * this.root.scale.y\n      ),\n      new Vec2(this.root.scale.x * 175, this.root.scale.y * 250)\n    );\n\n    this.drawTriangle(\n      new Vec2(\n        this.root.position.x + 25,\n        this.root.position.y - 275 * this.root.scale.y\n      ),\n      new Vec2(this.root.scale.x * 150, this.root.scale.y * 225)\n    );\n  }\n}\n","/Users/justinfarrell/Documents/start-page/src/objects/Moon.tsx",[],"/Users/justinfarrell/Documents/start-page/src/objects/Mask.tsx",["113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":8,"column":30,"nodeType":"120","messageId":"121","endLine":8,"endColumn":46},{"ruleId":"118","severity":1,"message":"122","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":28},{"ruleId":"118","severity":1,"message":"123","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":25},{"ruleId":"118","severity":1,"message":"124","line":5,"column":27,"nodeType":"120","messageId":"121","endLine":5,"endColumn":38},{"ruleId":"118","severity":1,"message":"124","line":8,"column":10,"nodeType":"120","messageId":"121","endLine":8,"endColumn":21},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"@typescript-eslint/no-unused-vars","'EnvironmentModes' is defined but never used.","Identifier","unusedVar","'EnvironmentManager' is defined but never used.","'GenericRenderer' is defined but never used.","'RenderModes' is defined but never used.","no-global-assign","no-unsafe-negation"]